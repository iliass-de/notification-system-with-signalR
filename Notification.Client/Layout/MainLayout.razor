@inherits LayoutComponentBase
@inject MainState LayoutState
@inject IModalService modal 
@inject IToastService toastService
@using Microsoft.AspNetCore.SignalR.Client;
@implements IAsyncDisposable
@using Blazored.Toast.Configuration
@using Blazored.Toast.Services


<div class="page">
    <div class="sidebar">
        <NavMenu />
    </div>

    <main>
        <div class="top-row px-4">
        <a @onclick="@(()=>modal.Show<NotificationsModal>("Notifications"))" style ="cursor:pointer;" >
           <svg xmlns="http://www.w3.org/2000/svg" width="20" height="20" fill="currentColor" class="bi bi-bell" viewBox="0 0 16 16">
             <path d="M8 16a2 2 0 0 0 2-2H6a2 2 0 0 0 2 2M8 1.918l-.797.161A4 4 0 0 0 4 6c0 .628-.134 2.197-.459 3.742-.16.767-.376 1.566-.663 2.258h10.244c-.287-.692-.502-1.49-.663-2.258C12.134 8.197 12 6.628 12 6a4 4 0 0 0-3.203-3.92zM14.22 12c.223.447.481.801.78 1H1c.299-.199.557-.553.78-1C2.68 10.2 3 6.88 3 6c0-2.42 1.72-4.44 4.005-4.901a1 1 0 1 1 1.99 0A5 5 0 0 1 13 6c0 .88.32 4.2 1.22 6"/>
            </svg>
        </a>
            @if(LayoutState.CurrentCount > 0) {
                  <p style="color: red;" class="notification-label">@LayoutState.CurrentCount</p>
            }
            <a href="https://learn.microsoft.com/aspnet/core/" target="_blank">About</a>
        </div>
        <article class="content px-4">
            @Body
            <BlazoredToasts Position="ToastPosition.BottomRight"
                            Timeout="10"
                            IconType="IconType.FontAwesome"
                            SuccessClass="success-toast-override"
                            SuccessIcon="fa fa-thumbs-up"
                            ErrorIcon="fa fa-bug" />
        </article>
    </main>
</div>


@code{

    protected override void OnInitialized()
    {
        LayoutState.NotificationEvent+= UpdateState;
    }

    private void UpdateState()
    {
        InvokeAsync(() =>
        {
            StateHasChanged();
        });
    }

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
        {
            LayoutState.NotificationEvent += UpdateState;
        }
    }

    public void Dispose()
    {
        LayoutState.NotificationEvent -= UpdateState;
    }

    private HubConnection hubConnection;
    private int notificationCounter = 0;
    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl("http://localhost:5152/NotificationsHub")
            //log errors
           /* .ConfigureLogging(logging =>
            {
                logging.AddConsole();
                logging.SetMinimumLevel(LogLevel.Debug);
            })*/
            .WithAutomaticReconnect()
            .Build();

        hubConnection.On<string>("ReceiveNotification", async (message) =>
        {
            toastService.ShowInfo(message);
            Console.WriteLine(message);
            await LayoutState.AddTolist(message);
            notificationCounter =  notificationCounter +1;
            LayoutState.IncrementCount();
            InvokeAsync(StateHasChanged);

        });
        
         await hubConnection.StartAsync();

    }
    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }
}